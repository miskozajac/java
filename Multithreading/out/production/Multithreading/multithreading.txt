Multithreading je dost ine ako klasicke, mnohe veci sa tam robia inak ako som zvyknútý
1. responzivnost, rychlo odpovede resp reakcie na akciu uzivatela
    -keby je len jedno vlakno poziadavka usera sa bude spracovavat az po vybaveni poziadavky predchadzajuceho usera.
2. zvysenie performance vdaka paralelnemu spustaniu
    -znie mi to ako to iste ako bod 1

Ked zapnem počítať OS je potiahnutý z disku do pamäte. (asi do ram)
Ked zapnem aplikaciu OS zoberie túto apku z harddisku a v pamäti vytvorí inštanciu
    -toto sa volá Process alebo Context
    -každý proces je uplne izolovany od ostatných procesov
    PROCESS OBSAHUJE:
        -nejake metadata napr proces ID
        -files ktore appka potrebuje na citanie a zapisovanie
        -kód - instrukcie programu ktore budu vykonane na CPU
        -data (Heap) ktore appka potrebuje
        -a minimalne jedno vlakno nazyvane Main Thread
            -každe vlákno processu má vyšie spomenute veci spoločné ale má vlastný stack aj instruction pointer
            -každe vlákno vykonava iné instrukcie a ine funkcie
            Thread obsahuje:
                -Stack - miesto v pameti kde su ulozene lokalne premenne a kde sú funkcie vykonávané
                -Insturcion pointer - ukazovatel na dalšiu metódu/instrukciu ktorá sa bude vykonávať

Vlakna sheruju data files a kod, vlastne maju stack a pointer

1.
Nove vlakno sa tvorí takto: Thread vlakno = new Thread();
    -do () sa dáva nejake runnable object, vyzera to takto potom:
    Thread vlakno = new Thread(new Runnable() {
        @Override
        public void run() {

        }
    });

vytvorenie objektu vlakno nestačí, musime ho začať
-vlakno.start()

2. vlakno sa dá vytvoriť aj takto:
vytvorime class ktora extends Thread
-staci v nej len overridnuť run metodu
a potom Thread vlakno = new NewVlakno()

3. alebo podobne ako bod 1 ale v konstruktore nebude new runnable ale instancia klasy ktora bude implementovat runnable

VAULT:
-akože zlodeji sa snazia otvorit trezor, ak sa im do 10 sekund nepodari prelomiť heslo pride vlakno policajt ktorý
vlakna zlodejov ukončí

SEKCIA 3
    Test 31 - Vlakno môzem prerusit ak na nom zavolam vlakno.interupt ale funguje to len ak je v run metode daneho vlakna zachytena táto exception
        -keby je try catch zaobaleni napr vo while (true) tak by sme v catch museli dať aj return aby appka skončila
    Test 32 - ak nie tak sa v run daneho vlakna môzem pytat: Thread.currentThread.isInterupted, ak ano vtedy sa vykona to čo je v bloku
    Daemon vlakno - vyssie uvedene vlakna stále vykonavaju svoju loigku aj ked je už main thread skončené.
        ak nastavime vlakno setDaemon na true (musime to urobiť pred štartom vlákna) tak skončenim hlavneho vlakna sa skončí aj apkka, takže
        daemon vlákno nezabranuje aplikacii v skončení. Napr ak v Daemon klase neosetríme výpocet bude bežať kým sa nevykoná, ak dane vlákno nastavime na
        daemon tak sa apka skončí po prejdení main metody

    JOIN Thread
        -ak pridam join čaká sa v main na skončenie prave spracovavaneho threadu asi,
        -ak NEpridam join tak ak v čase dotazu v maine dane vlakno este nieje skončene tak v nasom kode sa vypise že sa ešte spracováva
        -riadok 30 a 60 som pridal ja na testovanie spravania sa plus pridavať/odstranovat riadok 23

        !!!!!!
        V Sekcii 4 sa ukazalo ze join musim pridať v samostanom for cykle, vyzazne to usetri rychlost
        !!!!!!

        -ak je napr prve cislo velmi velke môžem nastaviť čas čakania do join metody, vtedy sa po tom čase vykašle na čakanie na to vlakno
        a pokračuje system dalej, (ale to vlákno stale pracuje) ak pre vlákna (alebo len pre to velke) nastavim daemon na true tak prestane pracovať po
        skončení main

SEKCIA 4
    -vobec nechapem & >> |= teda ziskavanie tých farieb
    Obrazok načítame ako:
    BufferedImage sdf = ImageIO.read(new File("cesta k suboru"));
    Použitim viacerych vlakien som proces zrychlil o 10-15%, ujo vo video o 50%

    !!!!!
    Ked ale pridam join do samostatneho for cyklu (nie rovno pod t.start napisat t.join) tak dokazem usetriť aj 70%času
    prejdem so 650 milisec na 200
    !!!!!

    video 12 - vysvetlenie RGB


    !!!!!!!!!!!!!!!!!!!!
    HttpServer vytvorenie v ThroughtputHttpServerMain. Dám run a potom môžem zadať v prehliadači:
    http://localhost:8000/search?word=boss a vráti mi cislo, kolko krát sa slovo boss nachadza v knihe

    ApacheJMeter, stiahol som binary zip, rozbalil na plochu a z terminalu zavolal ako:
    java -jar C:\Users\user\Desktop\apache-jmeter-5.5\bin/ApacheJMeter.jar
    -potom ked sa otvori tak dáme meno, to sa potom na lavo prepíše ked dáme klik pravým a tam vybereme threads thread group
    -atd ako vo videu 14 (7min)















